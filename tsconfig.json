{
  "compilerOptions": {
    "incremental": false, // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度
    "baseUrl": "./",
    "outDir": "./dist",
    "target": "ESNext", // 目标语言的版本
    "module": "ESNext", // 目标语言的版本
    "declaration": true, // 生成声明文件，开启后会自动生成声明文件
    "moduleResolution": "Node",
    "esModuleInterop": true,
    "isolatedModules": false,
    "preserveValueImports": true,
    "allowSyntheticDefaultImports": true,
    "jsx": "preserve",
    "useDefineForClassFields": true,
    "suppressImplicitAnyIndexErrors": true,
    "strict": true, // 启用所有严格类型检查选项
    "noImplicitAny": true, // 在表达式和声明上有隐含的 any类型时报错
    "strictNullChecks": true, // 当类型检查时,要考虑' null '和' undefined '。
    "noImplicitThis": true, // 当 this 表达式值为 any 类型的时候,生成一个错误
    "alwaysStrict": true, // 以严格模式检查每个模块,并在每个文件里加入 'use strict'
    "resolveJsonModule": true, // 启用.json文件导入
    "allowJs": true, // 允许JavaScript文件成为程序的一部分。使用' checkJS '选项从这些文件中获取错误。
    "checkJs": true, // 在类型检查的JavaScript文件中启用错误报告。
    "noUnusedLocals": true, // 有未使用的变量时,抛出错误
    "noUnusedParameters": true, // 有未使用的参数时,抛出错误
    "noImplicitReturns": true, // 并不是所有函数里的代码都有返回值时,抛出错误
    "noFallthroughCasesInSwitch": true, // 报告 switch 语句的 fallthrough 错误。(即,不允许 switch 的 case 语句贯穿)
    "useUnknownInCatchVariables": false, // 类型捕获子句变量为'unknown'而不是'any'
    "removeComments": false, // 移除注释
    "noEmit": true, // 禁止编译器生成文件
    "newLine": "lf", // 设置生成文件的换行符
    "forceConsistentCasingInFileNames": true, // 强制文件名的大小写一致
    "strictFunctionTypes": true, // 在赋值函数时,请检查以确保参数和返回值是子类型兼容的
    "strictBindCallApply": true, // 检查' bind '、' call '和' apply '方法的参数是否与原始函数匹配
    "strictPropertyInitialization": true, // 检查在构造函数中声明但没有设置的类属性
    "noUncheckedIndexedAccess": true, // 在索引签名结果中包含'undefined'
    "noImplicitOverride": true, // 确保派生类中的重写成员用重写修饰符标记
    "importsNotUsedAsValues": "error" // 强制对类型使用“import type”而不是“import”
  }
}
